   1               		.file	"blinky.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.morse_character,"ax",@progbits
  11               	.global	morse_character
  13               	morse_character:
  14               	.LFB8:
  15               		.file 1 "blinky.c"
   1:blinky.c      **** /* LED Blink Example with USB Debug Channel for Teensy USB Development Board
   2:blinky.c      ****  * http://www.pjrc.com/teensy/
   3:blinky.c      ****  * Copyright (c) 2008, 2010 PJRC.COM, LLC
   4:blinky.c      ****  * 
   5:blinky.c      ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   6:blinky.c      ****  * of this software and associated documentation files (the "Software"), to deal
   7:blinky.c      ****  * in the Software without restriction, including without limitation the rights
   8:blinky.c      ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:blinky.c      ****  * copies of the Software, and to permit persons to whom the Software is
  10:blinky.c      ****  * furnished to do so, subject to the following conditions:
  11:blinky.c      ****  * 
  12:blinky.c      ****  * The above copyright notice and this permission notice shall be included in
  13:blinky.c      ****  * all copies or substantial portions of the Software.
  14:blinky.c      ****  * 
  15:blinky.c      ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:blinky.c      ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:blinky.c      ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:blinky.c      ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:blinky.c      ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:blinky.c      ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:blinky.c      ****  * THE SOFTWARE.
  22:blinky.c      ****  */
  23:blinky.c      **** 
  24:blinky.c      **** #include <avr/io.h>
  25:blinky.c      **** #include <avr/pgmspace.h>
  26:blinky.c      **** #include <util/delay.h>
  27:blinky.c      **** #include "usb_debug_only.h"
  28:blinky.c      **** #include "print.h"
  29:blinky.c      **** 
  30:blinky.c      **** 
  31:blinky.c      **** // Teensy 2.0: LED is active high
  32:blinky.c      **** #if defined(__AVR_ATmega32U4__) || defined(__AVR_AT90USB1286__)
  33:blinky.c      **** #define LED_ON		(PORTD |= (1<<6))
  34:blinky.c      **** #define LED_OFF		(PORTD &= ~(1<<6))
  35:blinky.c      **** 
  36:blinky.c      **** // Teensy 1.0: LED is active low
  37:blinky.c      **** #else
  38:blinky.c      **** #define LED_ON	(PORTD &= ~(1<<6))
  39:blinky.c      **** #define LED_OFF	(PORTD |= (1<<6))
  40:blinky.c      **** #endif
  41:blinky.c      **** 
  42:blinky.c      **** #define LED_CONFIG	(DDRD |= (1<<6))
  43:blinky.c      **** #define CPU_PRESCALE(n)	(CLKPR = 0x80, CLKPR = (n))
  44:blinky.c      **** #define DIT 80		/* unit time for morse code */
  45:blinky.c      **** 
  46:blinky.c      **** void morse_character(char c);
  47:blinky.c      **** void morse_P(const char *s);
  48:blinky.c      **** const unsigned char morse_code_table[];
  49:blinky.c      **** 
  50:blinky.c      **** 
  51:blinky.c      **** int main(void)
  52:blinky.c      **** {
  53:blinky.c      **** 	unsigned char i;
  54:blinky.c      **** 
  55:blinky.c      **** 	// set for 16 MHz clock, and make sure the LED is off
  56:blinky.c      **** 	CPU_PRESCALE(0);
  57:blinky.c      **** 	LED_CONFIG;
  58:blinky.c      **** 	LED_OFF;
  59:blinky.c      **** 
  60:blinky.c      **** 	// initialize the USB, but don't want for the host to
  61:blinky.c      **** 	// configure.  The first several messages sent will be
  62:blinky.c      **** 	// lost because the PC hasn't configured the USB yet,
  63:blinky.c      **** 	// but we care more about blinking than debug messages!
  64:blinky.c      **** 	usb_init();
  65:blinky.c      **** 
  66:blinky.c      **** 	// blink morse code messages!
  67:blinky.c      **** 	while (1) {
  68:blinky.c      **** 		for (i=0; i<6; i++) {
  69:blinky.c      **** 			morse_P(PSTR("SOS"));
  70:blinky.c      **** 			_delay_ms(1500);
  71:blinky.c      **** 		}
  72:blinky.c      **** 		morse_P(PSTR("DOES ANYBODY STILL KNOW MORSE CODE?"));
  73:blinky.c      **** 		_delay_ms(4000);
  74:blinky.c      **** 	}
  75:blinky.c      **** }
  76:blinky.c      **** 
  77:blinky.c      **** // blink a single character in Morse code
  78:blinky.c      **** void morse_character(char c)
  79:blinky.c      **** {
  16               		.loc 1 79 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 C82F      		mov r28,r24
  80:blinky.c      **** 	unsigned char code, count;
  81:blinky.c      **** 
  82:blinky.c      **** 	if (c == ' ') {
  32               		.loc 1 82 0
  33 0006 8032      		cpi r24,lo8(32)
  34 0008 01F4      		brne .L2
  83:blinky.c      **** 		print("Space\n");
  35               		.loc 1 83 0
  36 000a 80E0      		ldi r24,lo8(__c.1923)
  37 000c 90E0      		ldi r25,hi8(__c.1923)
  38               	.LVL1:
  39 000e 0E94 0000 		call print_P
  40               	.LVL2:
  41               	.LBB77:
  42               	.LBB78:
  43               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  44               		.loc 2 187 0
  45 0012 2FEF      		ldi r18,lo8(1791999)
  46 0014 87E5      		ldi r24,hi8(1791999)
  47 0016 9BE1      		ldi r25,hlo8(1791999)
  48 0018 2150      	1:	subi r18,1
  49 001a 8040      		sbci r24,0
  50 001c 9040      		sbci r25,0
  51 001e 01F4      		brne 1b
  52 0020 00C0      		rjmp .L10
  53               	.LVL3:
  54               	.L2:
  55               	.LBE78:
  56               	.LBE77:
  84:blinky.c      **** 		_delay_ms(DIT * 7);
  85:blinky.c      **** 		return;
  86:blinky.c      **** 	}
  87:blinky.c      **** 	if (c < 'A' || c > 'Z') {
  57               		.loc 1 87 0
  58 0022 8FEB      		ldi r24,lo8(-65)
  59               	.LVL4:
  60 0024 8C0F      		add r24,r28
  61 0026 8A31      		cpi r24,lo8(26)
  62 0028 00F0      		brlo .L4
  88:blinky.c      **** 		print("Opps, unsupported character: ");
  63               		.loc 1 88 0
  64 002a 80E0      		ldi r24,lo8(__c.1925)
  65 002c 90E0      		ldi r25,hi8(__c.1925)
  66 002e 0E94 0000 		call print_P
  67               	.LVL5:
  89:blinky.c      **** 		pchar(c);
  68               		.loc 1 89 0
  69 0032 8C2F      		mov r24,r28
  70 0034 0E94 0000 		call usb_debug_putchar
  71               	.LVL6:
  90:blinky.c      **** 		print("\n");
  72               		.loc 1 90 0
  73 0038 80E0      		ldi r24,lo8(__c.1927)
  74 003a 90E0      		ldi r25,hi8(__c.1927)
  75               	/* epilogue start */
  91:blinky.c      **** 		return;	
  92:blinky.c      **** 	}
  93:blinky.c      **** 	print("Char ");
  94:blinky.c      **** 	pchar(c);
  95:blinky.c      **** 	pchar(':');
  96:blinky.c      **** 	code = pgm_read_byte(morse_code_table + (c - 'A'));
  97:blinky.c      **** 	for (count = code & 0x07; count > 0; count--) {
  98:blinky.c      **** 		LED_ON;
  99:blinky.c      **** 		if (code & 0x80) {
 100:blinky.c      **** 			print(" dah");
 101:blinky.c      **** 			_delay_ms(DIT * 3);
 102:blinky.c      **** 		} else {
 103:blinky.c      **** 			print(" dit");
 104:blinky.c      **** 			_delay_ms(DIT);
 105:blinky.c      **** 		}
 106:blinky.c      **** 		LED_OFF;
 107:blinky.c      **** 		_delay_ms(DIT);
 108:blinky.c      **** 		code = code << 1;
 109:blinky.c      **** 	}
 110:blinky.c      **** 	print("\n");
 111:blinky.c      **** 	_delay_ms(DIT * 2);
 112:blinky.c      **** }
  76               		.loc 1 112 0
  77 003c DF91      		pop r29
  78 003e CF91      		pop r28
  79               	.LVL7:
  90:blinky.c      **** 		print("\n");
  80               		.loc 1 90 0
  81 0040 0C94 0000 		jmp print_P
  82               	.LVL8:
  83               	.L4:
  84               	.LBB79:
  85               	.LBB80:
  93:blinky.c      **** 	pchar(c);
  86               		.loc 1 93 0
  87 0044 80E0      		ldi r24,lo8(__c.1929)
  88 0046 90E0      		ldi r25,hi8(__c.1929)
  89 0048 0E94 0000 		call print_P
  90               	.LVL9:
  94:blinky.c      **** 	pchar(':');
  91               		.loc 1 94 0
  92 004c 8C2F      		mov r24,r28
  93 004e 0E94 0000 		call usb_debug_putchar
  94               	.LVL10:
  95:blinky.c      **** 	code = pgm_read_byte(morse_code_table + (c - 'A'));
  95               		.loc 1 95 0
  96 0052 8AE3      		ldi r24,lo8(58)
  97 0054 0E94 0000 		call usb_debug_putchar
  98               	.LVL11:
  99               	.LBB81:
  96:blinky.c      **** 	for (count = code & 0x07; count > 0; count--) {
 100               		.loc 1 96 0
 101 0058 EC2F      		mov r30,r28
 102 005a F0E0      		ldi r31,0
 103 005c E050      		subi r30,lo8(-(morse_code_table-65))
 104 005e F040      		sbci r31,hi8(-(morse_code_table-65))
 105               	/* #APP */
 106               	 ;  96 "blinky.c" 1
 107 0060 C491      		lpm r28, Z
 108               		
 109               	 ;  0 "" 2
 110               	.LVL12:
 111               	/* #NOAPP */
 112               	.LBE81:
  97:blinky.c      **** 		LED_ON;
 113               		.loc 1 97 0
 114 0062 DC2F      		mov r29,r28
 115 0064 D770      		andi r29,lo8(7)
 116               	.LVL13:
 117               	.L5:
 118 0066 DD23      		tst r29
 119 0068 01F0      		breq .L12
  98:blinky.c      **** 		if (code & 0x80) {
 120               		.loc 1 98 0
 121 006a 5E9A      		sbi 0xb,6
  99:blinky.c      **** 			print(" dah");
 122               		.loc 1 99 0
 123 006c C7FF      		sbrs r28,7
 124 006e 00C0      		rjmp .L6
 100:blinky.c      **** 			_delay_ms(DIT * 3);
 125               		.loc 1 100 0
 126 0070 80E0      		ldi r24,lo8(__c.1934)
 127 0072 90E0      		ldi r25,hi8(__c.1934)
 128 0074 0E94 0000 		call print_P
 129               	.LVL14:
 130               	.LBB82:
 131               	.LBB83:
 132               		.loc 2 187 0
 133 0078 2FEF      		ldi r18,lo8(767999)
 134 007a 87EB      		ldi r24,hi8(767999)
 135 007c 9BE0      		ldi r25,hlo8(767999)
 136 007e 2150      	1:	subi r18,1
 137 0080 8040      		sbci r24,0
 138 0082 9040      		sbci r25,0
 139 0084 01F4      		brne 1b
 140 0086 00C0      		rjmp .L9
 141               	.LVL15:
 142               	.L6:
 143               	.LBE83:
 144               	.LBE82:
 103:blinky.c      **** 			_delay_ms(DIT);
 145               		.loc 1 103 0
 146 0088 80E0      		ldi r24,lo8(__c.1936)
 147 008a 90E0      		ldi r25,hi8(__c.1936)
 148 008c 0E94 0000 		call print_P
 149               	.LVL16:
 150               	.LBB84:
 151               	.LBB85:
 152               		.loc 2 187 0
 153 0090 2FEF      		ldi r18,lo8(255999)
 154 0092 87EE      		ldi r24,hi8(255999)
 155 0094 93E0      		ldi r25,hlo8(255999)
 156 0096 2150      	1:	subi r18,1
 157 0098 8040      		sbci r24,0
 158 009a 9040      		sbci r25,0
 159 009c 01F4      		brne 1b
 160               	.LVL17:
 161               	.L9:
 162 009e 00C0      		rjmp .
 163 00a0 0000      		nop
 164               	.LBE85:
 165               	.LBE84:
 106:blinky.c      **** 		_delay_ms(DIT);
 166               		.loc 1 106 0
 167 00a2 5E98      		cbi 0xb,6
 168               	.LVL18:
 169               	.LBB86:
 170               	.LBB87:
 171               		.loc 2 187 0
 172 00a4 2FEF      		ldi r18,lo8(255999)
 173 00a6 87EE      		ldi r24,hi8(255999)
 174 00a8 93E0      		ldi r25,hlo8(255999)
 175 00aa 2150      	1:	subi r18,1
 176 00ac 8040      		sbci r24,0
 177 00ae 9040      		sbci r25,0
 178 00b0 01F4      		brne 1b
 179 00b2 00C0      		rjmp .
 180 00b4 0000      		nop
 181               	.LVL19:
 182               	.LBE87:
 183               	.LBE86:
 108:blinky.c      **** 	}
 184               		.loc 1 108 0
 185 00b6 CC0F      		lsl r28
 186               	.LVL20:
  97:blinky.c      **** 		LED_ON;
 187               		.loc 1 97 0
 188 00b8 D150      		subi r29,lo8(-(-1))
 189               	.LVL21:
 190 00ba 00C0      		rjmp .L5
 191               	.L12:
 110:blinky.c      **** 	_delay_ms(DIT * 2);
 192               		.loc 1 110 0
 193 00bc 80E0      		ldi r24,lo8(__c.1941)
 194 00be 90E0      		ldi r25,hi8(__c.1941)
 195 00c0 0E94 0000 		call print_P
 196               	.LVL22:
 197               	.LBB88:
 198               	.LBB89:
 199               		.loc 2 187 0
 200 00c4 2FEF      		ldi r18,lo8(511999)
 201 00c6 8FEC      		ldi r24,hi8(511999)
 202 00c8 97E0      		ldi r25,hlo8(511999)
 203 00ca 2150      	1:	subi r18,1
 204 00cc 8040      		sbci r24,0
 205 00ce 9040      		sbci r25,0
 206 00d0 01F4      		brne 1b
 207               	.LVL23:
 208               	.L10:
 209 00d2 00C0      		rjmp .
 210 00d4 0000      		nop
 211               	/* epilogue start */
 212               	.LBE89:
 213               	.LBE88:
 214               	.LBE80:
 215               	.LBE79:
 216               		.loc 1 112 0
 217 00d6 DF91      		pop r29
 218 00d8 CF91      		pop r28
 219 00da 0895      		ret
 220               		.cfi_endproc
 221               	.LFE8:
 223               		.section	.text.morse_P,"ax",@progbits
 224               	.global	morse_P
 226               	morse_P:
 227               	.LFB9:
 113:blinky.c      **** 
 114:blinky.c      **** // blink an entire message in Morse code
 115:blinky.c      **** // the string must be in flash memory (using PSTR macro)
 116:blinky.c      **** void morse_P(const char *s)
 117:blinky.c      **** {
 228               		.loc 1 117 0
 229               		.cfi_startproc
 230               	.LVL24:
 231 0000 CF93      		push r28
 232               	.LCFI2:
 233               		.cfi_def_cfa_offset 3
 234               		.cfi_offset 28, -2
 235 0002 DF93      		push r29
 236               	.LCFI3:
 237               		.cfi_def_cfa_offset 4
 238               		.cfi_offset 29, -3
 239               	/* prologue: function */
 240               	/* frame size = 0 */
 241               	/* stack size = 2 */
 242               	.L__stack_usage = 2
 243 0004 FC01      		movw r30,r24
 244               	.LVL25:
 245               	.L15:
 246               	.LBB90:
 118:blinky.c      **** 	char c;
 119:blinky.c      **** 	
 120:blinky.c      **** 	while (1) {
 121:blinky.c      **** 		c = pgm_read_byte(s++);
 247               		.loc 1 121 0
 248               	/* #APP */
 249               	 ;  121 "blinky.c" 1
 250 0006 8491      		lpm r24, Z
 251               		
 252               	 ;  0 "" 2
 253               	.LVL26:
 254               	/* #NOAPP */
 255 0008 EF01      		movw r28,r30
 256 000a 2196      		adiw r28,1
 257               	.LVL27:
 258               	.LBE90:
 122:blinky.c      **** 		if (!c) break;
 259               		.loc 1 122 0
 260 000c 8823      		tst r24
 261 000e 01F0      		breq .L14
 123:blinky.c      **** 		morse_character(c);
 262               		.loc 1 123 0
 263 0010 0E94 0000 		call morse_character
 264               	.LVL28:
 265 0014 FE01      		movw r30,r28
 124:blinky.c      **** 	}
 266               		.loc 1 124 0
 267 0016 00C0      		rjmp .L15
 268               	.LVL29:
 269               	.L14:
 125:blinky.c      **** 	print("\n");
 270               		.loc 1 125 0
 271 0018 80E0      		ldi r24,lo8(__c.1952)
 272 001a 90E0      		ldi r25,hi8(__c.1952)
 273               	.LVL30:
 274               	/* epilogue start */
 126:blinky.c      **** }
 275               		.loc 1 126 0
 276 001c DF91      		pop r29
 277 001e CF91      		pop r28
 278               	.LVL31:
 125:blinky.c      **** 	print("\n");
 279               		.loc 1 125 0
 280 0020 0C94 0000 		jmp print_P
 281               	.LVL32:
 282               		.cfi_endproc
 283               	.LFE9:
 285               		.section	.text.startup.main,"ax",@progbits
 286               	.global	main
 288               	main:
 289               	.LFB7:
  52:blinky.c      **** 	unsigned char i;
 290               		.loc 1 52 0
 291               		.cfi_startproc
 292               	/* prologue: function */
 293               	/* frame size = 0 */
 294               	/* stack size = 0 */
 295               	.L__stack_usage = 0
  56:blinky.c      **** 	LED_CONFIG;
 296               		.loc 1 56 0
 297 0000 80E8      		ldi r24,lo8(-128)
 298 0002 8093 6100 		sts 97,r24
 299 0006 1092 6100 		sts 97,__zero_reg__
  57:blinky.c      **** 	LED_OFF;
 300               		.loc 1 57 0
 301 000a 569A      		sbi 0xa,6
  58:blinky.c      **** 
 302               		.loc 1 58 0
 303 000c 5E98      		cbi 0xb,6
  64:blinky.c      **** 
 304               		.loc 1 64 0
 305 000e 0E94 0000 		call usb_init
 306               	.LVL33:
 307               	.L18:
  52:blinky.c      **** 	unsigned char i;
 308               		.loc 1 52 0
 309 0012 C6E0      		ldi r28,lo8(6)
 310               	.LVL34:
 311               	.L17:
  69:blinky.c      **** 			_delay_ms(1500);
 312               		.loc 1 69 0 discriminator 3
 313 0014 80E0      		ldi r24,lo8(__c.1910)
 314 0016 90E0      		ldi r25,hi8(__c.1910)
 315 0018 0E94 0000 		call morse_P
 316               	.LVL35:
 317               	.LBB91:
 318               	.LBB92:
 319               		.loc 2 187 0 discriminator 3
 320 001c 2FEF      		ldi r18,lo8(4799999)
 321 001e 8DE3      		ldi r24,hi8(4799999)
 322 0020 99E4      		ldi r25,hlo8(4799999)
 323 0022 2150      	1:	subi r18,1
 324 0024 8040      		sbci r24,0
 325 0026 9040      		sbci r25,0
 326 0028 01F4      		brne 1b
 327 002a 00C0      		rjmp .
 328 002c 0000      		nop
 329               	.LVL36:
 330 002e C150      		subi r28,lo8(-(-1))
 331               	.LVL37:
 332               	.LBE92:
 333               	.LBE91:
  68:blinky.c      **** 			morse_P(PSTR("SOS"));
 334               		.loc 1 68 0 discriminator 3
 335 0030 01F4      		brne .L17
  72:blinky.c      **** 		_delay_ms(4000);
 336               		.loc 1 72 0
 337 0032 80E0      		ldi r24,lo8(__c.1915)
 338 0034 90E0      		ldi r25,hi8(__c.1915)
 339 0036 0E94 0000 		call morse_P
 340               	.LVL38:
 341               	.LBB93:
 342               	.LBB94:
 343               		.loc 2 187 0
 344 003a 2FEF      		ldi r18,lo8(12799999)
 345 003c 8FE4      		ldi r24,hi8(12799999)
 346 003e 93EC      		ldi r25,hlo8(12799999)
 347 0040 2150      	1:	subi r18,1
 348 0042 8040      		sbci r24,0
 349 0044 9040      		sbci r25,0
 350 0046 01F4      		brne 1b
 351 0048 00C0      		rjmp .
 352 004a 0000      		nop
 353 004c 00C0      		rjmp .L18
 354               	.LBE94:
 355               	.LBE93:
 356               		.cfi_endproc
 357               	.LFE7:
 359               		.section	.progmem.data,"a",@progbits
 362               	__c.1952:
 363 0000 0A00      		.string	"\n"
 366               	__c.1941:
 367 0002 0A00      		.string	"\n"
 370               	__c.1936:
 371 0004 2064 6974 		.string	" dit"
 371      00
 374               	__c.1934:
 375 0009 2064 6168 		.string	" dah"
 375      00
 378               	__c.1929:
 379 000e 4368 6172 		.string	"Char "
 379      2000 
 382               	__c.1927:
 383 0014 0A00      		.string	"\n"
 386               	__c.1925:
 387 0016 4F70 7073 		.string	"Opps, unsupported character: "
 387      2C20 756E 
 387      7375 7070 
 387      6F72 7465 
 387      6420 6368 
 390               	__c.1923:
 391 0034 5370 6163 		.string	"Space\n"
 391      650A 00
 394               	__c.1915:
 395 003b 444F 4553 		.string	"DOES ANYBODY STILL KNOW MORSE CODE?"
 395      2041 4E59 
 395      424F 4459 
 395      2053 5449 
 395      4C4C 204B 
 398               	__c.1910:
 399 005f 534F 5300 		.string	"SOS"
 400               	.global	morse_code_table
 403               	morse_code_table:
 404 0063 42        		.byte	66
 405 0064 84        		.byte	-124
 406 0065 A4        		.byte	-92
 407 0066 83        		.byte	-125
 408 0067 01        		.byte	1
 409 0068 24        		.byte	36
 410 0069 C3        		.byte	-61
 411 006a 04        		.byte	4
 412 006b 02        		.byte	2
 413 006c 74        		.byte	116
 414 006d A3        		.byte	-93
 415 006e 44        		.byte	68
 416 006f C2        		.byte	-62
 417 0070 82        		.byte	-126
 418 0071 E3        		.byte	-29
 419 0072 64        		.byte	100
 420 0073 D4        		.byte	-44
 421 0074 43        		.byte	67
 422 0075 03        		.byte	3
 423 0076 81        		.byte	-127
 424 0077 23        		.byte	35
 425 0078 14        		.byte	20
 426 0079 63        		.byte	99
 427 007a 94        		.byte	-108
 428 007b B4        		.byte	-76
 429 007c C4        		.byte	-60
 430               		.text
 431               	.Letext0:
 432               		.file 3 "/usr/lib/avr/include/stdint.h"
 433               		.file 4 "print.h"
 434               		.file 5 "usb_debug_only.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 blinky.c
     /tmp/ccVSCT3N.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccVSCT3N.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccVSCT3N.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccVSCT3N.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccVSCT3N.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccVSCT3N.s:13     .text.morse_character:0000000000000000 morse_character
     /tmp/ccVSCT3N.s:390    .progmem.data:0000000000000034 __c.1923
     /tmp/ccVSCT3N.s:386    .progmem.data:0000000000000016 __c.1925
     /tmp/ccVSCT3N.s:382    .progmem.data:0000000000000014 __c.1927
     /tmp/ccVSCT3N.s:378    .progmem.data:000000000000000e __c.1929
     /tmp/ccVSCT3N.s:403    .progmem.data:0000000000000063 morse_code_table
     /tmp/ccVSCT3N.s:374    .progmem.data:0000000000000009 __c.1934
     /tmp/ccVSCT3N.s:370    .progmem.data:0000000000000004 __c.1936
     /tmp/ccVSCT3N.s:366    .progmem.data:0000000000000002 __c.1941
     /tmp/ccVSCT3N.s:226    .text.morse_P:0000000000000000 morse_P
     /tmp/ccVSCT3N.s:362    .progmem.data:0000000000000000 __c.1952
     /tmp/ccVSCT3N.s:288    .text.startup.main:0000000000000000 main
     /tmp/ccVSCT3N.s:398    .progmem.data:000000000000005f __c.1910
     /tmp/ccVSCT3N.s:394    .progmem.data:000000000000003b __c.1915

UNDEFINED SYMBOLS
print_P
usb_debug_putchar
usb_init
